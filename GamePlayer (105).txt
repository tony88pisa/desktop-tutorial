string newsmessage = LanguageMgr.GetTranslation(Client.Account.Language, "GamePlayer.GainRealmPoints.ReachedRankNews", Name, RealmLevel + 10, LastPositionUpdateZone.Description);
NewsMgr.CreateNews(newsmessage, this.Realm, eNewsType.RvRLocal, true);
				}
				if (CanGenerateNews && RealmPoints >= 1000000 && RealmPoints - amount < 1000000)
				{
					string message = LanguageMgr.GetTranslation(Client.Account.Language, "GamePlayer.GainRealmPoints.Earned", Name, LastPositionUpdateZone.Description);
string newsmessage = LanguageMgr.GetTranslation(Client.Account.Language, "GamePlayer.GainRealmPoints.Earned", Name, LastPositionUpdateZone.Description);
					NewsMgr.CreateNews(newsmessage, this.Realm, eNewsType.RvRLocal, true);
				}
			}
			Out.SendUpdatePoints();
		}

[Obsolete("Use RemoveMoney(Money) instead.")]
public bool RemoveBountyPoints(long amount)
{
return RemoveBountyPoints(amount, null);
}

[Obsolete("Use RemoveMoney(Money) and SendSystemMessage(string) instead.")]
public bool RemoveBountyPoints(long amount, string str)
{
return RemoveBountyPoints(amount, str, eChatType.CT_Say, eChatLoc.CL_SystemWindow);
}

[Obsolete("Use RemoveMoney(Money) and SendMessage(string,eChatType,eChatLoc) instead.")]
public virtual bool RemoveBountyPoints(long amount, string str, eChatType type, eChatLoc loc)
{
var hasEnoughBps = Wallet.RemoveMoney(Currency.BountyPoints.Mint(amount));
if (hasEnoughBps && str != null && amount != 0) SendMessage(str, type, loc);
return hasEnoughBps;
}

		/// <summary>
		/// Player gains bounty points
