			{
				m_task = AbstractTask.LoadFromDatabase(this, tasks[0]);
			}
			else if (tasks.Count > 1)
			{
				if (log.IsErrorEnabled)
					log.Error("More than one DBTask Object found for player " + Name);
			}

			// Load ML steps of player ...
			var mlsteps = DOLDB<DBCharacterXMasterLevel>.SelectObjects(DB.Column(nameof(DBCharacterXMasterLevel.Character_ID)).IsEqualTo(QuestPlayerID));
			if (mlsteps.Count > 0)
			{
				foreach (DBCharacterXMasterLevel mlstep in mlsteps)
					m_mlSteps.Add(mlstep);
			}

			m_previousLoginDate = DBCharacter.LastPlayed;

			// Has to be updated on load to ensure time offline isn't added to character /played.
			DBCharacter.LastPlayed = DateTime.Now;

			m_titles.Clear();
			foreach(IPlayerTitle ttl in PlayerTitleMgr.GetPlayerTitles(this))
				m_titles.Add(ttl);
			
			IPlayerTitle t = PlayerTitleMgr.GetTitleByTypeName(DBCharacter.CurrentTitleType);
			if (t == null)
				t = PlayerTitleMgr.ClearTitle;
			m_currentTitle = t;

			//let's only check if we can use /level once shall we,
			//this is nice because i want to check the property often for the new catacombs classes

			//find all characters in the database
			foreach (DOLCharacters plr in Client.Account.Characters)
			{
				//where the level of one of the characters if 50
				if (plr.Level == ServerProperties.Properties.SLASH_LEVEL_REQUIREMENT && GameServer.ServerRules.CountsTowardsSlashLevel(plr))
				{
